{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Angel\\\\source\\\\repos\\\\tetstest\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\nexport var actionCreators = {\n  getNutritionFacts: function getNutritionFacts() {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState) {\n        try {\n          fetch(\"api/nutrition\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return dispatch({\n              type: 'SET_NUTRITION_TO_STORE',\n              payload: data\n            });\n          });\n        } catch (error) {\n          alert('getCertificates error!' + error);\n        }\n      }\n    };\n  }\n};\nvar componentUnloadedState = {\n  isLoading: false,\n  nutritionFacts: []\n};\nexport var simpleReducer = function simpleReducer(state, componentUpdateAction) {\n  if (state === undefined) {\n    return componentUnloadedState;\n  }\n\n  var action = componentUpdateAction;\n\n  switch (action.type) {\n    case 'SET_NUTRITION_TO_STORE':\n      return _objectSpread({}, state, {\n        nutritionFacts: action.payload\n      });\n  }\n\n  return state;\n};","map":{"version":3,"sources":["C:/Users/Angel/source/repos/tetstest/ClientApp/src/store/simpleStore.ts"],"names":["actionCreators","getNutritionFacts","dispatch","getState","appState","fetch","method","headers","then","response","json","data","type","payload","error","alert","componentUnloadedState","isLoading","nutritionFacts","simpleReducer","state","componentUpdateAction","undefined","action"],"mappings":";AAmGA;AACA;AACA;AAEA,OAAO,IAAMA,cAAc,GAAG;AAC1BC,EAAAA,iBAAiB,EAAE;AAAA,WAA2B,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAClE,UAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;AACA,UAAIC,QAAJ,EAAc;AACV,YAAI;AACAC,UAAAA,KAAK,kBAAkB;AACnBC,YAAAA,MAAM,EAAE,KADW;AAEnBC,YAAAA,OAAO,EAAE;AACL,8BAAgB;AADX;AAFU,WAAlB,CAAL,CAMKC,IANL,CAMU,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,WANlB,EAOKF,IAPL,CAOU,UAAAG,IAAI;AAAA,mBACNT,QAAQ,CAAC;AAAEU,cAAAA,IAAI,EAAE,wBAAR;AAAkCC,cAAAA,OAAO,EAAEF;AAA3C,aAAD,CADF;AAAA,WAPd;AASH,SAVD,CAWA,OAAOG,KAAP,EAAc;AACVC,UAAAA,KAAK,CAAC,2BAA2BD,KAA5B,CAAL;AACH;AACJ;AACJ,KAlBkB;AAAA;AADO,CAAvB;AAsBP,IAAME,sBAA8C,GAAG;AAAEC,EAAAA,SAAS,EAAE,KAAb;AAAoBC,EAAAA,cAAc,EAAE;AAApC,CAAvD;AAEA,OAAO,IAAMC,aAA8C,GAAG,SAAjDA,aAAiD,CAACC,KAAD,EAA4CC,qBAA5C,EAAsG;AAChK,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,WAAON,sBAAP;AACH;;AAED,MAAMO,MAAM,GAAGF,qBAAf;;AACA,UAAQE,MAAM,CAACX,IAAf;AACI,SAAK,wBAAL;AACI,+BACOQ,KADP;AAEIF,QAAAA,cAAc,EAAEK,MAAM,CAACV;AAF3B;AAFR;;AAOA,SAAOO,KAAP;AACH,CAdM","sourcesContent":["import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from '.';\r\n\r\nexport interface NutritionFact {\r\n    productName: string;\r\n    from: string;\r\n    _id: string;\r\n    servingSizeInOz: string;\r\n    servingsPerContainer: string;\r\n    ingredientList: string[];\r\n    calories: number;\r\n    totalFatInG: number;\r\n    totalFatDV: number;\r\n    saturatedFatInG: number;\r\n    saturatedFatDV: number;\r\n    transFatInG: number;\r\n    polyunsatFatInG: number;\r\n    monounsatFatInG: number;\r\n    cholesterolInMg: number;\r\n    cholesterolDV: number;\r\n    sodiumInMg: number;\r\n    sodiumDV: number;\r\n    totalCarbsInG: number;\r\n    totalCarbsDV: number;\r\n    dietaryFiberInG: number;\r\n    dietaryFiberDV: number;\r\n    sugarsInG: number;\r\n    addedSugarsInG: number;\r\n    addedSugarsDV: number;\r\n    proteinInG: number;\r\n    proteinDV: number;\r\n    vitaminDInMcg: string;\r\n    vitaminDDV: number;\r\n    calciumInMg: number;\r\n    calciumDV: number;\r\n    ironInMg: number;\r\n    ironDV: number;\r\n    potassiumInMg: number;\r\n    potassiumDV: number;\r\n    vitaminAInMcg: number;\r\n    vitaminADV: number;\r\n    vitaminCInMcg: number;\r\n    vitaminCDV: number;\r\n    vitaminEInMcg: number;\r\n    vitaminEDV: number;\r\n    vitaminKInMcg: number;\r\n    vitaminKDV: number;\r\n    thiamineInMg: string;\r\n    thiamineDV: number;\r\n    riboflavinInMg: string;\r\n    riboflavinDV: number;\r\n    niacinInMg: string;\r\n    niacinDV: number;\r\n    vitaminB6InMg: string;\r\n    vitaminB6DV: number;\r\n    folateMcgDFE: number;\r\n    folateDV: number;\r\n    vitaminB12InMg: number;\r\n    vitaminB12DV: number;\r\n    biotinInMcg: number;\r\n    biotinDV: number;\r\n    pantothenicAcidInMg: number;\r\n    pantothenicAcidDV: number;\r\n    phosphorusInMg: number;\r\n    phosphorusDV: number;\r\n    magnesiumInMg: number;\r\n    magnesiumDV: number;\r\n    zincInMg: string;\r\n    zincDV: number;\r\n    manganeseInMg: number;\r\n    manganeseDV: number;\r\n    chromiumInMcg: number;\r\n    chromiumDV: number;\r\n    percentJuice: number;\r\n    caffeineInMg: number;\r\n}\r\n\r\nexport interface ComponentSelectorState {\r\n    isLoading: boolean;\r\n    nutritionFacts: NutritionFact[];\r\n}\r\n\r\ninterface RequestComponentUpdateAction {\r\n    type: 'UPDATE_COMPONENT_REQUEST';\r\n    name: string;\r\n}\r\n\r\ninterface ResponseComponentUpdateAction {\r\n    type: 'UPDATE_COMPONENT_RESPONSE';\r\n    name: string;\r\n}\r\n\r\ninterface RequestNutritionFacts {\r\n    type: 'SET_NUTRITION_TO_STORE';\r\n    payload: NutritionFact[];\r\n}\r\n\r\ntype UpdateComponentKnownAction = RequestNutritionFacts | RequestComponentUpdateAction | ResponseComponentUpdateAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    getNutritionFacts: (): AppThunkAction<any> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState) {\r\n            try {\r\n                fetch(`api/nutrition`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                })\r\n                    .then(response => response.json() as Promise<NutritionFact[]>)\r\n                    .then(data =>\r\n                        dispatch({ type: 'SET_NUTRITION_TO_STORE', payload: data }));\r\n            }\r\n            catch (error) {\r\n                alert('getCertificates error!' + error)\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst componentUnloadedState: ComponentSelectorState = { isLoading: false, nutritionFacts: [] };\r\n\r\nexport const simpleReducer: Reducer<ComponentSelectorState> = (state: ComponentSelectorState | undefined, componentUpdateAction: Action): ComponentSelectorState => {\r\n    if (state === undefined) {\r\n        return componentUnloadedState;\r\n    }\r\n\r\n    const action = componentUpdateAction as UpdateComponentKnownAction;\r\n    switch (action.type) {\r\n        case 'SET_NUTRITION_TO_STORE':\r\n            return {\r\n                ...state,\r\n                nutritionFacts: action.payload,\r\n            };\r\n    }\r\n    return state;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}